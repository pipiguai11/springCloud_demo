<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
               http://dubbo.apache.org/schema/dubbo
               http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!--
     集群容错（消费方）
         Failover Cluster（缺省）
             失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries="2" 来设置重试次数(不含第一次)。

         Failfast Cluster
             快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。

         Failsafe Cluster
             失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。

         Failback Cluster
             失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。

         Forking Cluster
             并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks="2" 来设置最大并行数。

         Broadcast Cluster
             广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。

         Available Cluster
            调用目前可用的实例（只调用一个），如果当前没有可用的实例，则抛出异常。通常用于不需要负载均衡的场景。

         Mergeable Cluster
            将集群中的调用结果聚合起来返回结果，通常和group一起配合使用。通过分组对结果进行聚合并返回聚合后的结果，比如菜单服务，用group区分同一接口的多种实现，现在消费方需从每种group中调用一次并返回结果，对结果进行合并之后返回，这样就可以实现聚合菜单项。
     -->

    <!-- 应用信息配置，对应ApplicationConfig；主要配置的是应用的信息，包括提供者和消费者 -->
    <dubbo:application name="consumer"/>

    <!-- 注册中心配置-->
    <!-- 这里设置了个超时时间，主要是为了测试集群模式 -->
    <dubbo:registry address="zookeeper://127.0.0.1:2181" check="false" timeout="1000"/>

    <!-- 服务消费者引用服务配置，指定引用的接口，以及这个Bean的ID（这个id就是注入的BeanName，如果在消费者中需要手动注入，可以直接使用这个名字，不过一般都是通过@Reference注解注入，它会通过接口类型去判断并注入），还可以定义使用的注册中心或者协议等等，具体的看到官方文档 -->
    <dubbo:reference interface="com.lhw.dubbo_api.service.UserService" id="consumrService" cluster="failfast"/>

<!--    <dubbo:reference interface="com.lhw.dubbo_api.service.AddrService" id="addrService" cluster="failsafe" retries="1"/>-->
    <dubbo:reference interface="com.lhw.dubbo_api.service.AddrService" id="addrService" cluster="failfast"/>

</beans>